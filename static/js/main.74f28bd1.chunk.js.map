{"version":3,"sources":["componants/Photos.js","componants/Navbar.js","componants/Jumbotron.js","componants/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Photos","initialImages","useState","images","setImages","clickedImages","setClickedImages","score","setScore","highScore","setHighScore","gameOver","won","alert","className","map","PhotoNew","src","class","style","width","height","key","alt","onClick","newScore","a","i","length","j","Math","floor","random","shuffle","navbar","id","href","Jumbotron","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAgBe,SAASA,IAEpB,IAAMC,EAAgB,CACpB,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,iBACA,iBACA,kBAd2B,EAgBCC,mBAASD,GAhBV,mBAgBpBE,EAhBoB,KAgBZC,EAhBY,OAiBeF,mBAAS,IAjBxB,mBAiBpBG,EAjBoB,KAiBLC,EAjBK,OAkBDJ,mBAAS,GAlBR,mBAkBpBK,EAlBoB,KAkBbC,EAlBa,OAmBON,mBAAS,GAnBhB,mBAmBpBO,EAnBoB,KAmBTC,EAnBS,KAsBrBC,EAAW,SAAAC,GACXA,EACAC,MAAM,YAENA,MAAM,aAEVT,EAAU,GAAD,OAAKH,IACdK,EAAiB,IACjBE,EAAS,IAGb,OACI,yBAAKM,UAAU,OAEhB,+CAAsBP,GACrB,6BACA,4CAAkBE,GACnB,6BAEMN,EAAOY,KAAI,SAAAC,GAAQ,OAChB,yBACIC,IAAKD,EACLE,MAAO,iBACPC,MAAO,CAACC,MAAO,IAAKC,OAAQ,KAC5BC,IAAKN,EACLO,IAAKP,EACLQ,QAAS,WACL,GAAInB,EAAcW,GACd,OAAOL,GAAS,GAEpBL,EAAiB,2BACVD,GADS,kBAEXW,GAAW,KAEhB,IAAMS,EAAWlB,EAAQ,EAMzB,OALAC,EAASiB,GACLA,EAAWhB,GACXC,EAAae,GAEjBrB,EAtExB,SAAiBsB,GAEf,IAAK,IAAIC,GADTD,EAAC,YAAOA,IACOE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACnC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADP,EAEpB,CAACD,EAAEG,GAAIH,EAAEC,IAAvBD,EAAEC,GAFgC,KAE5BD,EAAEG,GAF0B,KAIvC,OAAOH,EAgEyBO,CAAQ9B,IACdsB,GAAY,GACLd,GAAS,QADpB,S,KC3ET,SAASuB,IACpB,OACI,yBAAKC,GAAG,UACR,uBAAGC,KAAK,SAAR,wBACA,uBAAGA,KAAK,SAAR,4BCJO,SAASC,IACpB,OACI,yBAAKnB,MAAM,0BAAX,2RCFO,SAASgB,IACpB,OACI,yBAAKC,GAAG,UAAR,mBCcOG,MAZf,WACE,OACE,oCACF,kBAAC,EAAD,MACA,kBAACD,EAAD,MACA,kBAACrC,EAAD,MACF,kBAAC,EAAD,QCDoBuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.74f28bd1.chunk.js","sourcesContent":["import React from \"react\";\nimport css from \"../app.css\";\nimport hover from\"hover.css\";\nimport {useState} from 'react'\n\n\n  // function below is from: https://stackoverflow.com/a/6274381\nfunction shuffle(a) {\n  a = [...a]\n  for (let i = a.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [a[i], a[j]] = [a[j], a[i]]\n  }\n  return a\n}\n\nexport default function Photos() {\n   \n    const initialImages = [\n      \"/images/1.jpg\",\n      \"/images/1.jpg\",\n      \"/images/3.jpg\", \n      \"/images/4.jpg\" ,\n      \"/images/5.jpg\" ,\n      \"/images/6.jpg\" ,\n      \"/images/7.jpg\" ,\n      \"/images/8.jpg\" ,\n      \"/images/9.jpg\" ,\n      \"/images/10.jpg\",\n      \"/images/11.jpg\",\n      \"/images/12.jpg\",]\n\n      const [images, setImages] = useState(initialImages)\n      const [clickedImages, setClickedImages] = useState({})\n      const [score, setScore] = useState(0)\n      const [highScore, setHighScore] = useState(0)\n\n\n      const gameOver = won => {\n        if (won) {\n            alert('You won!')\n        } else {\n            alert('You lost!')\n        }\n        setImages([...initialImages])\n        setClickedImages({})\n        setScore(0)\n    }\n\n    return (\n        <div className=\"App\">  \n        \n       <h1 > Current score: {score}</h1>\n        <br />\n        <h1> High score: {highScore}</h1> \n       <br />\n\n            {images.map(PhotoNew =>\n                <img\n                    src={PhotoNew}\n                    class={\"hvr-pulse-grow\"}\n                    style={{width: 200, height: 200}}\n                    key={PhotoNew}\n                    alt={PhotoNew}\n                    onClick={() => {\n                        if (clickedImages[PhotoNew]) {\n                            return gameOver(false)\n                        }\n                        setClickedImages({\n                            ...clickedImages,\n                            [PhotoNew]: true\n                        })\n                        const newScore = score + 1\n                        setScore(newScore)\n                        if (newScore > highScore) {\n                            setHighScore(newScore)\n                        }\n                        setImages(shuffle(images))\n                        if (newScore >= 12) {\n                            return gameOver(true)\n                        }\n                    }}\n                />\n            )}\n        </div>\n    );\n}","import React from 'react'\nimport css from '../nav.css'\n\nexport default function navbar() {\n    return (\n        <div id=\"navbar\">\n        <a href=\"#home\">Bird Watcher-SQUACK </a>\n        <a href=\"#news\">click an image to begin</a>\n      </div>\n    )\n}\n","import React from 'react'\nimport jumbotron from 'react-bootstrap/Jumbotron';\n\nexport default function Jumbotron() {\n    return (\n        <div class=\"jumbotron text center \">\n         Welcome to Bird Watcher-SQUACK edition. \n\n         Instructions:\n         The following game is designed to test your ornolothological skills. Here you are in the midst of a strange html page. You suddenly are surrounded by birds. Can you ensure to not click one twice before reaching the number 12.\n        \n        </div>\n    )\n}\n","import React from 'react'\nimport css from '../nav.css'\n\nexport default function navbar() {\n    return (\n        <div id=\"navbar\">\n         Made with React\n      </div>\n    )\n}\n","import React, {useState} from 'react';\nimport Photos from \"./componants/Photos\";\nimport Navbar from  \"./componants/Navbar\";\nimport Jumbotron from './componants/Jumbotron';\nimport Footer from \"./componants/Footer\";\n\n\nfunction App() {\n  return (\n    <>\n  <Navbar/ >\n  <Jumbotron/>\n  <Photos/>\n<Footer/>\n   </>\n  )\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport bootstrap from 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}